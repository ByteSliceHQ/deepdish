/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as ToneImport } from './../routes/tone'
import { Route as LogsImport } from './../routes/logs'
import { Route as I18nImport } from './../routes/i18n'
import { Route as CatalogImport } from './../routes/catalog'
import { Route as IndexImport } from './../routes/index'
import { Route as CatalogIndexImport } from './../routes/catalog/index'
import { Route as CatalogNewImport } from './../routes/catalog/new'
import { Route as CatalogKeyImport } from './../routes/catalog/$key'

// Create/Update Routes

const ToneRoute = ToneImport.update({
  id: '/tone',
  path: '/tone',
  getParentRoute: () => rootRoute,
} as any)

const LogsRoute = LogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any)

const I18nRoute = I18nImport.update({
  id: '/i18n',
  path: '/i18n',
  getParentRoute: () => rootRoute,
} as any)

const CatalogRoute = CatalogImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CatalogIndexRoute = CatalogIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CatalogRoute,
} as any)

const CatalogNewRoute = CatalogNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CatalogRoute,
} as any)

const CatalogKeyRoute = CatalogKeyImport.update({
  id: '/$key',
  path: '/$key',
  getParentRoute: () => CatalogRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogImport
      parentRoute: typeof rootRoute
    }
    '/i18n': {
      id: '/i18n'
      path: '/i18n'
      fullPath: '/i18n'
      preLoaderRoute: typeof I18nImport
      parentRoute: typeof rootRoute
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsImport
      parentRoute: typeof rootRoute
    }
    '/tone': {
      id: '/tone'
      path: '/tone'
      fullPath: '/tone'
      preLoaderRoute: typeof ToneImport
      parentRoute: typeof rootRoute
    }
    '/catalog/$key': {
      id: '/catalog/$key'
      path: '/$key'
      fullPath: '/catalog/$key'
      preLoaderRoute: typeof CatalogKeyImport
      parentRoute: typeof CatalogImport
    }
    '/catalog/new': {
      id: '/catalog/new'
      path: '/new'
      fullPath: '/catalog/new'
      preLoaderRoute: typeof CatalogNewImport
      parentRoute: typeof CatalogImport
    }
    '/catalog/': {
      id: '/catalog/'
      path: '/'
      fullPath: '/catalog/'
      preLoaderRoute: typeof CatalogIndexImport
      parentRoute: typeof CatalogImport
    }
  }
}

// Create and export the route tree

interface CatalogRouteChildren {
  CatalogKeyRoute: typeof CatalogKeyRoute
  CatalogNewRoute: typeof CatalogNewRoute
  CatalogIndexRoute: typeof CatalogIndexRoute
}

const CatalogRouteChildren: CatalogRouteChildren = {
  CatalogKeyRoute: CatalogKeyRoute,
  CatalogNewRoute: CatalogNewRoute,
  CatalogIndexRoute: CatalogIndexRoute,
}

const CatalogRouteWithChildren =
  CatalogRoute._addFileChildren(CatalogRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/catalog': typeof CatalogRouteWithChildren
  '/i18n': typeof I18nRoute
  '/logs': typeof LogsRoute
  '/tone': typeof ToneRoute
  '/catalog/$key': typeof CatalogKeyRoute
  '/catalog/new': typeof CatalogNewRoute
  '/catalog/': typeof CatalogIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/i18n': typeof I18nRoute
  '/logs': typeof LogsRoute
  '/tone': typeof ToneRoute
  '/catalog/$key': typeof CatalogKeyRoute
  '/catalog/new': typeof CatalogNewRoute
  '/catalog': typeof CatalogIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/catalog': typeof CatalogRouteWithChildren
  '/i18n': typeof I18nRoute
  '/logs': typeof LogsRoute
  '/tone': typeof ToneRoute
  '/catalog/$key': typeof CatalogKeyRoute
  '/catalog/new': typeof CatalogNewRoute
  '/catalog/': typeof CatalogIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/catalog'
    | '/i18n'
    | '/logs'
    | '/tone'
    | '/catalog/$key'
    | '/catalog/new'
    | '/catalog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/i18n'
    | '/logs'
    | '/tone'
    | '/catalog/$key'
    | '/catalog/new'
    | '/catalog'
  id:
    | '__root__'
    | '/'
    | '/catalog'
    | '/i18n'
    | '/logs'
    | '/tone'
    | '/catalog/$key'
    | '/catalog/new'
    | '/catalog/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CatalogRoute: typeof CatalogRouteWithChildren
  I18nRoute: typeof I18nRoute
  LogsRoute: typeof LogsRoute
  ToneRoute: typeof ToneRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CatalogRoute: CatalogRouteWithChildren,
  I18nRoute: I18nRoute,
  LogsRoute: LogsRoute,
  ToneRoute: ToneRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/catalog",
        "/i18n",
        "/logs",
        "/tone"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/catalog": {
      "filePath": "catalog.tsx",
      "children": [
        "/catalog/$key",
        "/catalog/new",
        "/catalog/"
      ]
    },
    "/i18n": {
      "filePath": "i18n.tsx"
    },
    "/logs": {
      "filePath": "logs.tsx"
    },
    "/tone": {
      "filePath": "tone.tsx"
    },
    "/catalog/$key": {
      "filePath": "catalog/$key.tsx",
      "parent": "/catalog"
    },
    "/catalog/new": {
      "filePath": "catalog/new.tsx",
      "parent": "/catalog"
    },
    "/catalog/": {
      "filePath": "catalog/index.tsx",
      "parent": "/catalog"
    }
  }
}
ROUTE_MANIFEST_END */
