import { contentPath, initContent } from '@/content'
import { DeepDishProvider } from '@deepdish/cms'
import { createJsonResolver } from '@deepdish/resolvers/json'
import { configure } from '@deepdish/ui/config'
import { typographySchema } from '@deepdish/ui/schemas'
import type { Metadata } from 'next'
import localFont from 'next/font/local'
import './globals.css'

await initContent()

await configure({
  contracts: {
    typography: {
      resolver: createJsonResolver(contentPath, typographySchema, {
        maxBatchSize: 10,
      }),
      schema: typographySchema,
    },
  },
  logging: {
    enabled: process.env.NODE_ENV === 'development',
  },
  settings: {
    baseUrl: process.env.BASE_URL,
    draft: process.env.DEEPDISH_MODE === 'draft',
  },
})

const geistSans = localFont({
  src: './fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
})

const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <DeepDishProvider>{children}</DeepDishProvider>
      </body>
    </html>
  )
}
